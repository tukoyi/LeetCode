// Runtime: 44 ms, faster than 13.79% of Go online submissions for Merge Two Binary Trees.
//Memory Usage: 8.9 MB, less than 5.00% of Go online submissions for Merge Two Binary Trees.
// https://leetcode.com/problems/merge-two-binary-trees/submissions/

// 我的解法
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {
    node := &TreeNode{}
    
    if t1 == nil && t2 == nil {
        return nil
    }
    
    if t1 == nil {
        node.Val =  t2.Val 
        node.Left = mergeTrees(nil, t2.Left)
        node.Right = mergeTrees(nil, t2.Right)
    } 
    
    if t2 == nil {
        node.Val =  t1.Val 
        node.Left = mergeTrees(t1.Left, nil)
        node.Right = mergeTrees(t1.Right, nil)
    } 
    
    if t1 != nil && t2 != nil {
        node.Val =  t1.Val + t2.Val
        node.Left = mergeTrees(t1.Left, t2.Left)
        node.Right = mergeTrees(t1.Right, t2.Right) 
    }
    
    return node   
}


//更优的解法
// Runtime: 28 ms, faster than 100.00% of Go online submissions for Merge Two Binary Trees.
//Memory Usage: 8.8 MB, less than 45.00% of Go online submissions for Merge Two Binary Trees.
不创建新的对象

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {

    if t1 == nil {
        return t2
    } 
    
    if t2 == nil {
        return t1
    } 
    
    if t1 != nil && t2 != nil {
        t1.Val =  t1.Val + t2.Val
        t1.Left = mergeTrees(t1.Left, t2.Left)
        t1.Right = mergeTrees(t1.Right, t2.Right) 
    }
    
    return t1
   
    
}