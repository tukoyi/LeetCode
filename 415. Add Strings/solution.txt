https://leetcode.com/problems/add-strings/

Runtime: 36 ms, faster than 5.66% of Go online submissions for Add Strings.
Memory Usage: 7.1 MB, less than 12.50% of Go online submissions for Add Strings.
Next challenges:

func addStrings(num1 string, num2 string) string {
    var carry = 0
    var a = 0
    var b = 0
    zeroInAnscii := []byte("0")[0]
    var ret []int
    var sum string
    
    for i, j := len(num1) - 1, len(num2) - 1; i >= 0 || j >= 0; i, j = i -1, j -1 {
        if i < 0 {
            a = 0
        } else {
            a = int(num1[i] - zeroInAnscii)
        }
        
        if j < 0 {
            b = 0
        } else {
            b = int(num2[j] - zeroInAnscii)
        }
        
        
        val := (a + b + carry) % 10
        carry = (a + b + carry) / 10
        ret = append(ret, val)
        fmt.Println(a, b, val)
    }
    if carry == 1 {
        ret = append(ret, carry)
    }

    
    for index := len(ret) - 1; index >= 0; index -- {
        sum = sum + fmt.Sprintf("%d", ret[index])
    }
    return sum
    
}


优化：
Runtime: 8 ms, faster than 43.40% of Go online submissions for Add Strings.
Memory Usage: 7.1 MB, less than 12.50% of Go online submissions for Add Strings.

func addStrings(num1 string, num2 string) string {
	var carry  = 0
	var a = 0
	var b = 0
	var toString = []string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
	var ret string

	for i, j := len(num1) - 1, len(num2) - 1; i >= 0 || j >= 0; i, j = i -1, j -1 {
		if i < 0 {
			a = 0
		} else {
			a = int(num1[i] - '0')
		}

		if j < 0 {
			b = 0
		} else {
			b = int(num2[j] - '0')
		}

		val := (a + b + carry) % 10
		carry = (a + b + carry) / 10
		ret =  toString[val] + ret

	}
	if carry == 1 {
		ret = toString[carry] + ret
	}
	return ret

}